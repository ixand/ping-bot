import 'dotenv/config';

const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const CHAT_ID = process.env.CHAT_ID;
const railwayURL = process.env.RAILWAY_URL;

let previousStatus = null; // null | true (alive) | false (down)

async function checkService(name, url) {
    try {
        const response = await fetch(url);
        if (response.ok) {
            console.log(`[‚úÖ] ${name} –∞–∫—Ç–∏–≤–Ω–∏–π (—Å—Ç–∞—Ç—É—Å: ${response.status})`);
            return true;
        } else {
            console.log(`[‚ö†Ô∏è] ${name} –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î, –∞–ª–µ —Å—Ç–∞—Ç—É—Å: ${response.status}`);
            return false;
        }
    } catch (error) {
        console.log(`[‚ùå] ${name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
        return false;
    }
}

async function notifyTelegram(message) {
    const url = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`;
    try {
        await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ chat_id: CHAT_ID, text: message })
        });
        console.log(`[üì©] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ Telegram`);
    } catch (error) {
        console.error(`[‚ùå] –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤ Telegram: ${error.message}`);
    }
}

async function main() {
    console.log(`\nüîç [${new Date().toLocaleTimeString()}] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Railway...\n`);

    const isAlive = await checkService('–ë–æ—Ç –Ω–∞ Railway', railwayURL);

    // –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–∏–≤—Å—è –∞–±–æ —Ü–µ –ø–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫ ‚Äî –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if (previousStatus === null || isAlive !== previousStatus) {
        const msg = isAlive
            ? `‚úÖ Railway (production) –∞–∫—Ç–∏–≤–Ω–∏–π —ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î.`
            : `‚ùå –ë–æ—Ç –Ω–∞ Railway –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π! –ú–æ–∂–ª–∏–≤–æ, —Ç—Ä–∏–≤–∞—é—Ç—å —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Ä–æ–±–æ—Ç–∏.`;

        console.log('\n[‚ÑπÔ∏è] ' + msg);
        await notifyTelegram(msg);
    }

    previousStatus = isAlive;
}

main();
setInterval(main, 3 * 1000);
